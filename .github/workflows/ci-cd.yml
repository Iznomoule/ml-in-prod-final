name: CI-CD

permissions:
  contents: write  

on:
  pull_request:
    branches: [ "dev" ]
  push:
    branches: [ "dev" ]

jobs:
  # Job A : Build & test sur dev
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install pytest
          pip install httpx
          pip install -r app/requirements.txt
          pip install --upgrade fastapi starlette

      - name: Set PYTHONPATH
        run: |
          echo "PYTHONPATH=$PWD" >> $GITHUB_ENV

      - name: Run tests (integration)
        run: |
          pytest tests/integration

  # Job B : Push dev -> staging (dépend du job build-and-test)
  push-to-staging:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true

      - name: Push dev to staging
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          # Force-push dev vers staging (écrase la branche staging si elle contient d'autres commits)
          git push origin dev:staging --force

  # Job C : Sur la "nouvelle" staging, build & test plus complet, puis push->main
  #         (dépend du push-to-staging)
  staging-build-test-main:
    needs: push-to-staging
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          ref: staging
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install pytest
          pip install httpx
          pip install -r app/requirements.txt
          pip install --upgrade fastapi starlette

      - name: Set PYTHONPATH
        run: |
          echo "PYTHONPATH=$PWD" >> $GITHUB_ENV

      - name: start app in background
        run: |
          uvicorn app.main:app --host 0.0.0.0 --port 8000 & sleep 5

      - name: Run all tests
        run: |
          pytest tests

      - name: Push staging to main
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git push origin HEAD:main --force

  # Job D : Sur main, build Docker & déploiement
  #         (dépend du staging-build-test-main)
  production-deploy:
    needs: staging-build-test-main
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Docker login
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # ============ BACKEND IMAGE ===============
      - name: Build Docker image (backend)
        run: |
          docker build -t iznomoule/ml-in-prod-final-backend:latest .
          docker tag iznomoule/ml-in-prod-final-backend:latest iznomoule/ml-in-prod-final-backend:${{ github.run_number }}

      - name: Push Docker image (backend)
        run: |
          docker push iznomoule/ml-in-prod-final-backend:latest
          docker push iznomoule/ml-in-prod-final-backend:${{ github.run_number }}

      # ============ FRONTEND IMAGE =============
      - name: Build Docker image (frontend)
        run: |
          cd frontend/iris-frontend
          docker build -t iznomoule/ml-in-prod-final-frontend:latest .
          docker tag iznomoule/ml-in-prod-final-frontend:latest iznomoule/ml-in-prod-final-frontend:${{ github.run_number }}

      - name: Push Docker image (frontend)
        run: |
          docker push iznomoule/ml-in-prod-final-frontend:latest
          docker push iznomoule/ml-in-prod-final-frontend:${{ github.run_number }}


